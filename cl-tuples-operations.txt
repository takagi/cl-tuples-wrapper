;;; cl-tuples-operations.txt
;;;
;;; This file describes the operations defined in cl-tuples module.

* def-tuple
  - vec3-values*
  - eg. (vec3-values* 1.0 1.0 1.0) => #{ 1.0 1.0 1.0 }

* def-tuple-struct
  - defstruct vec3

* def-tuple-getter
  - vec3*
  - eg. (vec3* v) => #{ x y z }

* def-tuple-aref*
  - vec3-aref*
  - eg. (vec3-aref* vecs 2) => #{ 1.0 1.0 1.0 }

* def-tuple-aref
  - vec3-aref
  - eg. (vec3-aref vecs 2) => #( 1.0 1.0 1.0 )

* def-tuple-aref-setter*
  - vec3-aref-setter*
  - eg. (vec3-aref-setter* vecs 2 #{ 1.0 1.0 1.0 })

* def-tuple-aref-setter
  - vec3-aref-setter
  - eg. (vec3-aref-setter vecs 2 #( 1.0 1.0 1.0 ))

* def-tuple-array-dimensions
  - vec3-array-dimensions
  - eg. (vec3-array-dimensions vecs) => 10

* def-tuple-fill-pointer

* def-tuple-setf-fill-pointer

* def-with-tuple
  - with-vec3
  - eg. (with-vec3 #( 1.0 1.0 1.0 ) (x y z) (format t "~A" (list x y z)))

* def-with-tuple*
  - with-vec3*
  - eg. (with-vec3 #{ 1.0 1.0 1.0 } (x y z) (format t "~A" (list x y z)))

* def-with-tuple-aref
  - with-vec3-aref
  - eg. (with-vec3-aref (vecs 2 (x y z)) (format t "~A" (list x y z)))

* def-tuple-setter*
  - vec3-setter*
  - eg. (vec3-setter* v #{ 1.0 1.0 1.0 })

* def-tuple-vector-push

* def-tuple-vector-push-extend

* def-tuple-vector-push*

* def-tuple-vector-push-extend*

* def-new-tuple
  - new-vec3
  - eg. (new-vec3) => #( 0.0 0.0 0.0 )

* def-tuple-maker
  - make-vec3
  - eg. (make-vec3 1.0 1.0 1.0) => #( 1.0 1.0 1.0 )

* def-tuple-maker*
  - make-vec3*
  - eg. (make-vec3* #{ 1.0 1.0 1.0 } => #( 1.0 1.0 1.0 )

* def-tuple-array-maker
  - make-vec3-array
  - eg. (make-vec3-array 10) => #( 0.0 0.0 0.0 0.0 0.0 0.0 ... )

* def-tuple-setf*
  - vec3-setf*
  - eg. (vec3-setf* v #{ 1.0 1.0 1.0 })
  - same as def-tuple-setter*

* def-tuple-array-setf*
  - vec3-array-setf*
  - eg. (vec3-array-setf* v 2 #{ 1.0 1.0 1.0 })
  - same as def-tuple-aref-setter*

* def-tuple-array-setf
  - vec3-array-setf
  - eg. (vec3-array-setf v 2 #( 1.0 1.0 1.0 ))
  - same as def-tuple-aref-setter
